<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Tori Writes (Online)</title>
    <link>https://toriwrites.online/blog/</link>
    <description>Recent content in Blogs on Tori Writes (Online)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>WTFPL</copyright>
    <lastBuildDate>Sat, 14 Nov 2020 15:36:38 -0300</lastBuildDate><atom:link href="https://toriwrites.online/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Detalles interesantes e innecesarios en la ficción</title>
      <link>https://toriwrites.online/blog/2020-11-14-detailes-in-fiction/</link>
      <pubDate>Sat, 14 Nov 2020 15:36:38 -0300</pubDate>
      
      <guid>https://toriwrites.online/blog/2020-11-14-detailes-in-fiction/</guid>
      <description>Originalmente publicado en Ñoño Corps.
Hoy terminé de leer un fanfic fix-it1 de Endgame y hubo un detalle que me llamó la atención: cuando están en Camp Lehigh, Steve y Tony aprovechan de copiar los apuntes de Hank sobre las partículas Pym. Si bien esta escena es importante para la trama, en ella se presentan algunos detalles que perfectamente podrían no estar y no cambiaría en nada la historia. Uno de ellos es que Hank almacenara la información en papel y no en un computador.</description>
    </item>
    
    <item>
      <title>Changes to String in java (from 1.7.0_06)</title>
      <link>https://toriwrites.online/blog/2020-06-06-changes-in-java-string/</link>
      <pubDate>Sat, 06 Jun 2020 09:00:00 +0000</pubDate>
      
      <guid>https://toriwrites.online/blog/2020-06-06-changes-in-java-string/</guid>
      <description>Before 1.7.0_06, String has 4 non static field:
 char[] value int[] offset int count int hash  Subing.substring create a String by sharing the original String&amp;rsquo;s internal char[] value and setting offset. This saves memory and makes String.substring run in a constant time($O(1)$). Meanwhile, this feature may cause memory leak1.
http://hg.openjdk.java.net/jdk6/jdk6/jdk/file/8deef18bb749/src/share/classes/java/lang/String.java
public final class String implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence { /** The value is used for character storage. */ private final char value[]; /** The offset is the first index of the storage that is used.</description>
    </item>
    
    <item>
      <title>Algorithms - Graphs</title>
      <link>https://toriwrites.online/blog/2020-05-01-algorithms-graphs/</link>
      <pubDate>Fri, 01 May 2020 09:00:00 +0000</pubDate>
      
      <guid>https://toriwrites.online/blog/2020-05-01-algorithms-graphs/</guid>
      <description>Undirected Graphs Some problems  Path Shortest path Cycle Ehler tour: A cycle that uses each edge excatly once. Hamilton tour: A cycle that uses each vertex exactly once  classical NP-complete problem.   Connectivity MST: Biconnectivity: A vertex whose removal disconnects the graph Planarity Graph isomorphism: Are two graphs identical?  No one knows so far. A lonstanding open problem    Representations Real-world graphs tend to be sparse (huge number of vertices, small average vertex degree).</description>
    </item>
    
    <item>
      <title>Programming Language - Subtyping</title>
      <link>https://toriwrites.online/blog/2020-04-29-subtyping/</link>
      <pubDate>Wed, 29 Apr 2020 09:00:00 +0000</pubDate>
      
      <guid>https://toriwrites.online/blog/2020-04-29-subtyping/</guid>
      <description>Some Good Subtyping Rules  Width subtyping: A supertype can have a subset of fields with the same types, i.e., a subtype can have extra fields. Permutation subtypings: A supertype can have the same set of fields with the same types in a different order. Transitivity: if t1 is subtype of t2, and t2 is subtype of t3, then t1 is subtype of t3. Reflexivity: Every type is a subtype of itself.</description>
    </item>
    
    <item>
      <title>Racket notes</title>
      <link>https://toriwrites.online/blog/2020-02-29-racket/</link>
      <pubDate>Sat, 29 Feb 2020 09:00:00 +0000</pubDate>
      
      <guid>https://toriwrites.online/blog/2020-02-29-racket/</guid>
      <description>Basic #lang racket (provide (all-defined-out)) ;this is a comment (define s &amp;#34;hello&amp;#34;) (define x 3) (define y (+ x 2)) (define cube1 (lambda (x) (* x (* x x)))) (define cube2 (lambda (x) (* x x x))) (define (cube3 x) (* x x x)) (define (pow1 x y) (if (=y 0) 1 (* x (pow1 x (- y 1))))) ; currying (define pow2 (lambda (x) (lambda (y) (pow1 x y)))) List  Empty list: null  () doesn&amp;quot;t work for null but &#39;() does   build a list: (list e1 .</description>
    </item>
    
    <item>
      <title>Standard ML notes</title>
      <link>https://toriwrites.online/blog/2019-12-30-standardml-notes/</link>
      <pubDate>Mon, 30 Dec 2019 09:00:00 +0000</pubDate>
      
      <guid>https://toriwrites.online/blog/2019-12-30-standardml-notes/</guid>
      <description>Basics Comments (* SML comment *) Variable bindings and Expressions val x = 34; (* static environment: x : int *) (* dynamic environment: x --&amp;gt; 34 *) val y = x + 1; (* Use tilde character instead of minus to reprsent negation *) val z = ~1; (* Integer Division *) val w = y div x Strings:
(* `\n`のようなエスケープシーケンスが利用できる *) val x = &amp;quot;hello\n&amp;quot;; (* 文字列の連結には&#39;^&#39;を使う *) val y = &amp;quot;hello &amp;quot; ^ &amp;quot;world&amp;quot;; An ML program is a sequence of bindings.</description>
    </item>
    
  </channel>
</rss>
